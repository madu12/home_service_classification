from fastapi import FastAPI, HTTPException, Request, Response, status
from pydantic import BaseModel, Field
from scripts.model_prediction import predict_category, confirm_category, correct_category
from dotenv import load_dotenv
import os
from scripts.generative_ai import generate_category
import requests


load_dotenv()

CONFIDENCE_THRESHOLD = float(os.getenv('CONFIDENCE_THRESHOLD', 0.7))

app = FastAPI()

class PredictionRequest(BaseModel):
    service_description: str

class PredictionResponse(BaseModel):
    predicted_category: str
    confidence: float = Field(None, description="Confidence score of the prediction")
    predicted_category_by_gemin:str
    # generated_by_gemini: bool = Field(False, description="Indicates if the category was generated by Gemini")

class ConfirmationRequest(BaseModel):
    service_description: str
    category_name: str

class FeedbackRequest(BaseModel):
    service_description: str
    predicted_category: str
    correct_category: str

class Message(BaseModel):
    text: str
    from_: str
    to: str


@app.get("/")
def read_root():
    return {"message": "Home Service Classification API is running"}

@app.get("/webhooks")
async def verify_webhook(request: Request, response: Response):
    data = await request.json()
    print(f"Received message: {data}")

    # print("Verification failed")
    # return {"status": "failure"}, 403

@app.post("/predict", response_model=PredictionResponse)
def predict(request: PredictionRequest):
    try:
        predicted_category, confidence = predict_category(request.service_description)
        predicted_category_by_gemin = generate_category(request.service_description)


        return PredictionResponse(
            predicted_category=predicted_category,
            confidence=confidence,
            predicted_category_by_gemin=predicted_category_by_gemin
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/confirm")
def confirm(request: ConfirmationRequest):
    try:
        confirm_category(request.service_description, request.predicted_category)
        return {"message": "Category confirmed and job posted successfully."}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/correct")
def correct(request: FeedbackRequest):
    try:
        correct_category(request.service_description, request.predicted_category, request.correct_category)
        return {"message": "Category corrected and job posted successfully."}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=3000)
